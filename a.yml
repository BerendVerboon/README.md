---
- hosts: localhost
  connection: local #
  become: yes
  vars:
    target_user: "{{ lookup('env', 'TARGET_USER') | default('john', false) }}"

  tasks:
    - name: Debug .xinitrc destination path
      debug:
        msg: "/home/{{ target_user }}/.xinitrc"

    - name: Install necessary packages
      pacman:
        name:
          - xorg
          #- bspwm
          #- sxhkd
          #- terminator
          #- xorg-xinit
          #- xterm
          #- feh
          #- xorg-xauth
          #- polybar
          #- xf86-input-libinput
          #- alsa-utils
          #- lm_sensors
          #- sysstat
          #- virt-manager
          #- qemu
          #- libvirt
          #- virt-install
        state: present

    - name: Enable and start the libvirtd service
      systemd:
        name: libvirtd
        enabled: yes
        state: started
        daemon_reload: yes

    - name: Set zsh as the default shell for the target user
      user:
        name: "{{ target_user }}"
        shell: /bin/zsh

    - name: Install Oh My Zsh for the target user
      become_user: "{{ target_user }}"  # become the target user for this task
      shell: |
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
      args:
        executable: /bin/bash  # ensure we're running the command with bash
      environment:  # setting environment variables
        RUNZSH: 'no'  # prevent automatic running of zsh after installation
        CHSH: 'no'  # prevent changing the default shell, since it's already been set to zsh
        ZSH: "/home/{{ target_user }}/.oh-my-zsh"  # Oh My Zsh installation directory
      register: ohmyzsh_install  # register the output for debugging
      changed_when: "'Cloning Oh My Zsh' in ohmyzsh_install.stdout"  # mark the task as changed if Oh My Zsh is cloned
      check_mode: no  # ensure this command is executed even in check mode
      async: 60  # run the task asynchronously with a timeout of 60s
      poll: 10  # check the status every 10 seconds 

    - name: Install kitty terminal emulator
      apt:
        name: kitty
        state: latest
        update_cache: yes
      become: yes

    - name: Set timezone to Amsterdam
      timezone:
        name: Europe/Amsterdam

    - name: Ensure home directory permissions are correct
      file:
        path: "/home/{{ target_user }}"
        state: directory
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0755'

    - name: Ensure .Xauthority file exists
      file:
        path: "/home/{{ target_user }}/.Xauthority"
        state: touch
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0600'

    - name: Add user to video group
      user:
        name: "{{ target_user }}"
        groups: video
        append: yes

    - name: Add user to input group
      user:
        name: "{{ target_user }}"
        groups: input
        append: yes

    - name: Ensure .config directory exists for user
      file:
        path: "/home/{{ target_user }}/.config"
        state: directory
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0755'

    - name: Create bspwm config directory
      file:
        path: "/home/{{ target_user }}/.config/bspwm"
        state: directory
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0755'

    - name: Create sxhkd config directory
      file:
        path: "/home/{{ target_user }}/.config/sxhkd"
        state: directory
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0755'

    - name: Ensure terminator config directory exists
      file:
        path: "/home/{{ target_user }}/.config/terminator"
        state: directory
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0755'

    - name: Configure terminator transparency
      copy:
        dest: "/home/{{ target_user }}/.config/terminator/config"
        content: |
          [global_config]
          [keybindings]
          [profiles]
            [[default]]
            background_darkness = 0.85
            background_type = transparent
          [layouts]
          [plugins]
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0644'

    - name: Configure sxhkd hotkey to open a new Terminator window
      lineinfile:
        path: "/home/{{ target_user }}/.config/sxhkd/sxhkdrc"
        create: yes
        insertafter: EOF
        line: |
          # Open a new Terminator window
          super + shift + Return
              terminator
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0644'

    - name: Configure sxhkd hotkeys for workspace switching
      lineinfile:
        path: "/home/{{ target_user }}/.config/sxhkd/sxhkdrc"
        insertafter: EOF
        line: |
          # Workspace switching
          super + {1-9,0}
              bspc desktop -f '^{1-9,10}'
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0644'

    - name: Copy bspwm configuration
      copy:
        dest: "/home/{{ target_user }}/.config/bspwm/bspwmrc"
        content: |
          #!/bin/sh
          bspc monitor -d I II III IV V VI VII VIII IX X
          bspc config border_width 2
          bspc config window_gap 12
          bspc config split_ratio 0.52
          bspc config borderless_monocle true
          bspc config gapless_monocle true
          bspc rule -a Gimp desktop='^8' state=floating           follow=on
          bspc rule -a Chromium desktop='^2'
          bspc rule -a mplayer2 state=floating
          bspc rule -a Kupfer.py focus=on
          bspc rule -a Screenkey manage=off
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0755'

    - name: Ensure .config/bspwm directory exists
      file:
        path: "/home/{{ target_user }}/.config/bspwm"
        state: directory
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0755'

    - name: Start virt-manager on workspace 1 on bspwm
      blockinfile:
        path: "/home/{{ target_user }}/.config/bspwm/bspwmrc"
        block: |
          # Launch virt-manager on workspace 1
          bspc rule -a virt-manager-desktop desk='^1' follow=on
          virt-manager &
        marker: "# {mark} ANSIBLE MANAGED BLOCK FOR VIRT-MANAGER"
        create: yes
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0755'

    - name: Ensure polybar config directory exists
      file:
        path: "/home/{{ target_user }}/.config/polybar"
        state: directory
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0755'

    - name: Copy polybar configuration
      copy:
        dest: "/home/{{ target_user }}/.config/polybar/config"
        content: |
          [bar/example]
          width = 100%
          height = 24
          radius = 0
          fixed-center = false
          
          background = #222
          foreground = #fff
          
          line-size = 3
          line-color = #f00

          border-size = 0
          border-color = #00000000  
          
          padding-left = 0
          padding-right = 2

          module-margin-left = 1
          module-margin-right = 2
        
          font-0 = "xos4 Terminus:size=10;1"
          font-1 = "siji:pixelsize=10;1"
          
          modules-left = bspwm
          modules-center = cpu memory disk lan
          modules-right = pulseaudio myclock

          [module/bspwm]
          type = internal/bspwm
          ; Additional configurations for bspwm module here.

          [module/myclock]
          type = internal/date
          interval = 1.0

          date = "%Y-%m-%d"
          time = "%H:%M:%S"

          format-prefix = " "
          format-prefix-foreground = #555
          format-foreground = #fff
          format-background = #222

          label = %date% %time%

          ; CPU usage module
          [module/cpu]
          type = internal/cpu
          format = <label> <ramp-coreload>
          label = " | CPU %percentage%%"
          ramp-coreload-spacing = 1
          ramp-coreload-0 = %{F#0a0}▁%{F-}
          ramp-coreload-1 = %{F#0a0}▂%{F-}
          ramp-coreload-2 = %{F#0a0}▃%{F-}
          ramp-coreload-3 = %{F#0a0}▄%{F-}
          ramp-coreload-4 = %{F#f80}▅%{F-}
          ramp-coreload-5 = %{F#f80}▆%{F-}
          ramp-coreload-6 = %{F#f00}▇%{F-}
          ramp-coreload-7 = %{F#f00}█%{F-}

          ; Memory usage module
          [module/memory]
          type = internal/memory
          interval = 2.0
          label = MEM %percentage_used%%

          ; Disk usage module
          [module/disk]
          type = internal/fs
          interval = 30
          mount-0 = /
          label-mounted =  %free%

          [module/lan]
          type = internal/network
          interface = enp0s3
          label-connected = "%ifname%: %local_ip% |"
          label-disconnected = "%ifname%: not connected |"

          ; Volume module (requires `alsa-utils`)
          [module/pulseaudio]
          type = internal/pulseaudio
          format-volume = <label-volume> <bar-volume>
          label-volume = VOL %percentage%%
          label-volume-foreground = #a1b56c  ; volume color
          label-muted = VOL MUTED
          label-muted-foreground = #ab4642  ; muted color
          bar-volume-width = 10
          bar-volume-foreground-0 = #a1b56c  ; volume level - gradient start
          bar-volume-foreground-1 = #b8db81  ; volume level - gradient end
          bar-volume-indicator = |
          bar-volume-fill = -
          bar-volume-empty = -
          bar-volume-empty-foreground = #343d46  ; volume empty color
          bar-volume-gradient = false

          ; Further module configurations as needed...
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0644'

    - name: Copy .xinitrc file to user's home directory
      copy:
        dest: "/home/{{ target_user }}/.xinitrc"
        content: |
          #!/bin/sh
          # Set up an environment variable, if needed
          export SOME_VARIABLE="value"

          # Start some background applications
          xsetroot -solid grey &  # Set a solid grey background
          xrdb -merge ~/.Xresources &  # Load X resources (like terminal colors, fonts, etc.)

          # Set the background image using feh
          feh --bg-scale /home/{{ target_user }}/background.jpg &

          # Launch polybar
          polybar example &

          # Start Terminator
          terminator &

          # Start the window manager or desktop environment
          exec bspwm
        owner: "{{ target_user }}"
        group: "{{ target_user }}"
        mode: '0755'

# End of playbook
